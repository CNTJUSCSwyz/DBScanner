#coding:utf-8
#Author:se55i0n
import requests
import MySQLdb
import socket
import cx_Oracle
import pymongo
import psycopg2
import binascii
from config import *

class check(object):
	def __init__(self,passfile):
		try:
			if passfile is None:
				self.passwd = passwd
			else:
				with open(passfile,'r') as f:
					self.passwd=[]
					tmp = f.readlines()
					for pwd in tmp:
						self.passwd.append(pwd.strip())
		except Exception as e:
			print("Oops,it looks like the file path is wrong!")
	def mysql(self, ip,port=3306):
		for pwd in self.passwd:
			try:
				pwd = pwd.replace('{user}', 'root')
				conn = MySQLdb.connect(host=ip,port=port,user='root',passwd=pwd,db='mysql')
				print u'{}[+] {}:{}  Mysql存在弱口令: root  {}{}'.format(G, ip,port, pwd, W)
				conn.close()
				break
			except Exception as e:
				pass

	#author:hos@YSRC
	def mssql(self, ip,port=1433):
		for pwd in self.passwd:
			try:
				pwd = pwd.replace('{user}', 'sa')
				s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
				s.connect((ip, 1433))
				husername = binascii.b2a_hex('sa')
				lusername = len('sa')
				lpassword = len(pwd)
				hpwd = binascii.b2a_hex(pwd)
				address = binascii.b2a_hex(ip) +'3a'+ binascii.b2a_hex(str(1433))
				data1 = data.replace(data[16:16+len(address)], address)
				data2 = data1.replace(data1[78:78+len(husername)], husername)
				data3 = data2.replace(data2[140:140+len(hpwd)], hpwd)
				if lusername >= 16:
					data4 = data3.replace('0X', str(hex(lusername)).replace('0x', ''))
				else:
					data4 = data3.replace('X', str(hex(lusername)).replace('0x', ''))
				if lpassword >= 16:
					data5 = data4.replace('0Y', str(hex(lpassword)).replace('0x', ''))
				else:
					data5 = data4.replace('Y', str(hex(lpassword)).replace('0x', ''))
				hladd = hex(len(ip) + len(str(1433))+1).replace('0x', '')
				data6 = data5.replace('ZZ', str(hladd))
				data7 = binascii.a2b_hex(data6)
				s.send(data7)
				if 'master' in s.recv(1024):
					print u'{}[+] {}:{}  SQLserver存在弱口令: sa  {}{}'.format(G, ip,port, pwd, W)
					break
			except Exception as e:
				pass
			finally:
				s.close()

	def oracle(self, ip,port=1521):
		for i in range(1, len(oracle_user)):
			try:
				user = oracle_user[i]
				pwd  = oracle_pass_default[i]
				conn = cx_Oracle.connect(user, pwd, ip+':'+port+'/orcl')
				print u'{}[+] {}:{}  Oracle存在弱口令: {} {}{}'.format(G, ip,port, user, pwd, W)
				conn.close()
			except Exception as e:
				pass
		for pwd in passwd:
			try:
				pwd = pwd.replace('{user}', 'sys')
				conn = cx_Oracle.connect('sys', pwd, ip+':'+port+'/orcl')
				print u'{}[+] {}:{}  Oracle存在弱口令: sys {}{}'.format(G, ip,port, pwd, W)
				conn.close()
				break
			except Exception as e:
				pass

	def postgresql(self, ip,port=5432):
		for pwd in self.passwd:
			try:
				pwd = pwd.replace('{user}', 'postgres')
				conn = psycopg2.connect(host=ip, port=port, user='postgres', password=pwd)
				print u'{} [+] {}:{}  Postgresql存在弱口令: postgres  {}{}'.format(G, ip,port, pwd, W)
				conn.close()
				break
			except Exception as e:
				pass

	def redis(self, ip,port=6379):
		try:
			s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
			s.connect((ip, port))
			s.send('INFO\r\n')
			if 'redis_version' in s.recv(1024):
				print u'{}[+] {}:{}  Redis存在未授权访问{}'.format(G, ip,port, W)
			else:
				for pwd in self.passwd:
					try:
						pwd = pwd.replace('{user}', 'admin')
						s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
						s.connect((ip, port))
						s.send('AUTH {}\r\n'.format(pwd))
						if '+OK' in s.recv(1024):
							print u'{}[+] {}:{}  Redis存在弱口令: {}{}'.format(G, ip,port, pwd, W)
							break
					except Exception as e:
						pass
					finally:
						s.close()
		except Exception as e:
			pass
		finally:
			s.close()

	def mongodb(self, ip,port=27017):
		try:
			conn = pymongo.MongoClient(ip,port)
			dbname = conn.database_names()
			print u'{}[+] {}:{}  MongoDB存在未授权访问{}'.format(G, ip,port, W)
		except Exception as e:
			pass
		finally:
			conn.close()

	def memcached(self, ip,port=11211):
		try:
			s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
			s.connect((ip, port))
			s.send('stats\r\n')
			if 'version' in s.recv(1024):
				print u'{}[+] {}:{}  Memcached存在未授权访问{}'.format(G, ip,port, W)
		except Exception as e:
			pass
		finally:
			s.close()

	def elasticsearch(self, ip,port=9200):
		try:
			url = 'http://' + ip +':'+port+'/_cat'
			r = requests.get(url, timeout=5)
			if '/_cat/master' in r.content:
				print u'{}[+] {}:{}  Elasticsearch存在未授权访问{}'.format(G, ip,port, W)
		except Exception as e:
			pass

